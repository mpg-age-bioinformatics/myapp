server {
    # listen on port 80 (http)
	listen 80;
    listen [::]:80;
    server_name _;

    location / {
      try_files /index.html =404;
      root /usr/share/nginx/html;
      index index.html;
    }

    # location / {
    #     # redirect any requests to the same URL but on https
    #     # return 301 https://$host$request_uri;
    #     return 301 https://$host;
    # }
}
# server {
#     # listen on port 443 (https)
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;

#     # location of the self-signed SSL certificate
#     ssl_certificate /certs/cert.pem;
#     ssl_certificate_key /certs/key.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
#     ssl_session_tickets off;

#     # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /dhparam.pem
#     ssl_dhparam /certs/dhparam.pem;

#     # intermediate configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;

#     # HSTS (ngx_http_headers_module is required) (63072000 seconds)
#     add_header Strict-Transport-Security "max-age=63072000" always;

#     # OCSP stapling
#     ssl_stapling on;
#     ssl_stapling_verify on;

#     # verify chain of trust of OCSP response using Root CA and Intermediate certs
#     # eg. /etc/letsencrypt/live/example.com/chain.pem;
#     #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

#     # replace with the IP address of your resolver
#     #resolver 127.0.0.1;

#     # write access and error logs to /var/log
#     access_log /var/log/nginx/flaskapp_access.log;
#     error_log /var/log/nginx/flaskapp_error.log;

#     location / {
#       try_files /index.html =404;
#       root /usr/share/nginx/html;
#       index index.html;
#     }


# }